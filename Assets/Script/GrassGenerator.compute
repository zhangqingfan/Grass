// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

struct GrassConfig
{
    float pullToCenter;
    float heightOffset;
    float topOffset;
    float bend;
    float worldPosOffset;
};

struct GrassInfo
{
    float3 pos;
    float rotationDeg;
    float windDeg;
    float windSpeed; //not used
    float heightOffset;
    float topOffset;
    float bend;
};

float2 _GrassNumber;
float3 _TileLeftBottomPosition;
float _Spacing;
float4x4 _VP_MATRIX;
int grassConfigBufferCount;
float _WindSpeed;
float _Time;

AppendStructuredBuffer<GrassInfo> grassInfoBuffer;
StructuredBuffer<GrassConfig> grassConfigBuffer;

Texture2D<float4> voronoiRT;
SamplerState sampler_voronoiRT;

Texture2D<float4> windRT;
SamplerState sampler_windRT;

bool CameraCull(float3 worldPos)
{
    float4 clipPos = mul(_VP_MATRIX, float4(worldPos.xyz, 1));
    if (0 < clipPos.z && clipPos.z < clipPos.w &&
       -clipPos.w < clipPos.x && clipPos.x < clipPos.w &&
       -clipPos.w < clipPos.y && clipPos.y < clipPos.w)
    {
        return false;
    }
    return true;
}

float Rand(float x)
{
    return frac(sin(x) * 43758.5453);
}

float RandomRange(float x, float n)
{
    return (Rand(x) * 2.0 - 1.0) * n;
}

float3 RotateVectorY(float3 direction, float angleDegrees)
{
    float angleRadians = radians(angleDegrees);
    float s = sin(angleRadians);
    float c = cos(angleRadians);
    
    float3 rotated;
    rotated.x = direction.x * c - direction.z * s;
    rotated.y = direction.y;
    rotated.z = direction.z * c + direction.x * s;
   
    return normalize(rotated);
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x < _GrassNumber.x && id.y < _GrassNumber.y)
    {
        float2 uv = float2(id.x, id.y) / float2(_GrassNumber.x, _GrassNumber.y);
        float4 col = voronoiRT.SampleLevel(sampler_voronoiRT, uv, 0);
        float2 centerPosUV = float2(col.g, col.b);
        
        int idx = (int) col.r;
        idx = fmod(idx, grassConfigBufferCount);
        GrassConfig config = grassConfigBuffer[idx];
        uv = lerp(uv, centerPosUV, config.pullToCenter);
        
        float3 position = float3(uv.x * _GrassNumber.x * _Spacing, 0, uv.y * _GrassNumber.y * _Spacing) + _TileLeftBottomPosition;
        position.x += RandomRange(position.x + position.z, config.worldPosOffset);
        position.z += RandomRange(position.x - position.z, config.worldPosOffset);
        
        if (CameraCull(position) == true)
            return;
        
        //float2 centerPos = centerPosUV * _TileSize * _Spacing;
        //float3 sharedFacing = normalize(float3(Rand(centerPos.x), 0, Rand(centerPos.y)));
        //grassFacing = normalize(lerp(grassFacing, sharedFacing, config.sameDir)); //bug...
        //float rotationDeg = ChangeGrassFacing(position);
        float rotationDeg = RandomRange(position.x - position.z, 180);
        
        float heightOffset = RandomRange(position.x + position.z, config.heightOffset);
        float topOffset = RandomRange(position.x - position.z, config.topOffset);
        float bend = RandomRange(position.x * position.z, config.bend);
        
        //wind
        float2 windUV = uv + _Time * _WindSpeed;
        float windDeg = windRT.SampleLevel(sampler_windRT, windUV, 0);
        windDeg = (windDeg * 2 - 1) * 180;
        //
        
        GrassInfo gp;
        gp.pos = position;
        gp.rotationDeg = rotationDeg;
        gp.heightOffset = heightOffset;
        gp.topOffset = topOffset;
        gp.bend = bend;
        gp.windDeg = windDeg;
        gp.windSpeed = _WindSpeed; //todo...not used now;
        grassInfoBuffer.Append(gp);
    }
}
